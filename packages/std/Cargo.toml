[package]
name = "cosmwasm-std"
version = "1.1.6"
authors = ["Ethan Frey <ethanfrey@users.noreply.github.com>"]
edition = "2021"
description = "Standard library for Wasm based smart contracts on Cosmos blockchains"
repository = "https://github.com/CosmWasm/cosmwasm/tree/main/packages/std"
license = "Apache-2.0"
readme = "README.md"

[package.metadata.docs.rs]
features = ["std", "stargate", "staking", "ibc3"]

[features]
default = ["iterator", "abort"]
abort = []
# iterator allows us to iterate over all DB items in a given range
# optional as some merkle stores (like tries) don't support this
# given Ethereum 1.0, 2.0, Substrate, and other major projects use Tries
# we keep this optional, to allow possible future integration (or different Cosmos Backends)
iterator = []
# staking exposes bindings to a required staking moudle in the runtime, via new
# CosmosMsg types, and new QueryRequest types. This should only be enabled on contracts
# that require these types, so other contracts can be used on systems with eg. PoA consensus
staking = []
# backtraces provides much better context at runtime errors (in non-wasm code)
# at the cost of a bit of code size and performance.
# This feature requires Rust nightly because it depends on the unstable backtrace feature.
backtraces = []
# stargate enables stargate-dependent messages and queries, like raw protobuf messages
# as well as ibc-related functionality
stargate = []
# ibc3 extends ibc messages with ibc-v3 only features. This should only be enabled on contracts
# that require these types. Without this, they get the smaller ibc-v1 API.
ibc3 = ["stargate"]
# This feature makes `BankQuery::Supply` available for the contract to call, but requires
# the host blockchain to run CosmWasm `1.1.0` or higher.
cosmwasm_1_1 = []
# enable std support
std = ["forward_ref", "schemars", "serde-json-wasm", "thiserror", "cosmwasm-crypto", "derivative"]

[dependencies]
base64 = { version = "0.13.0", default-features = false, features = ["alloc"] }
cosmwasm-derive = { path = "../derive", version = "1.1.6" }
derivative = { version = "2", features = ["use_core"], optional = true }
forward_ref = { version = "1", optional = true }
hex = { version = "0.4", default-features = false, features = ["alloc"] }
schemars = { version = "0.8.3", optional = true }
serde = { version = "1.0.103", default-features = false, features = ["derive", "alloc"] }
serde-json-wasm = { version = "0.4.1", optional = true }
thiserror = { version = "1.0.13", optional = true }
uint = { version = "0.9.3", default-features = false }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
cosmwasm-crypto = { path = "../crypto", version = "1.1.6", optional = true }

[dev-dependencies]
cosmwasm-schema = { path = "../schema" }
# The chrono dependency is only used in an example, which Rust compiles for us. If this causes trouble, remove it.
chrono = { version = "0.4", default-features = false, features = ["alloc", "std"] }
hex-literal = "0.3.1"
